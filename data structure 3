// WAP to check if a given expression is correctly  parenthesized using stacks
#include<stdio.h>
#define MAX 100
int stack[MAX], top1 = -1, top2 = MAX;
int isStack1Empty()
{
    return (top1 == -1) ? 1 : 0;
}
int isStack2Empty()
{
    return (top2 == MAX) ? 1 : 0;
}
int isStack1Full()
{
    return (top1 == top2-1) ? 1 : 0;
}
int isStack2Full()
{
    return (top2 == top1 + 1) ? 1 : 0;
}
void push_stack1(int data)
{
    if(isStack1Full())
       printf("Stack-1 Overflow!!\n");
    else
    {
        stack[++top1] = data;
        printf("Element Added!!\n");
    }
}
void push_stack2(int data)
{
    if(isStack2Full())
       printf("Stack-2 Overflow!!\n");
    else
    {
        stack[--top2] = data;
        printf("Element Added!!\n");
    }
}
void pop_stack1()
{
    if(isStack1Empty())
       printf("Stack-1 Underflow!!\n");
    else
    {
        top1--;
        printf("Element deleted!!\n");
    }
}
void pop_stack2()
{
    if(isStack2Empty())
       printf("Stack-2 Underflow!!\n");
    else
    {
        top2--;
        printf("Element deleted!!\n");
    }
}
void peek_stack1()
{
    if(isStack1Empty())
       printf("Stack is empty!!\n");
    else
    {
        printf("Topmost Element = %d\n", stack[top]);
    }
}
void peek_stack2()
{
    if(isStack2Empty())
       printf("Stack is empty!!\n");
    else
    {
        printf("Topmost Element = %d\n", stack[top2]);
    }
}
void show_stack1()
void show_stack2()
